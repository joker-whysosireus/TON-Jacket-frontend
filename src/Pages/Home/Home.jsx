import { useState, useRef, useEffect, useCallback } from 'react';
import Confetti from 'react-confetti';
import Menu from '../../Assets/Menus/Menu/Menu';
import BalanceSection from './Components/Balance/BalanceSection';
import BetResultAndInstruction from './Components/BetResultAndInstruction/BetResultAndInstruction';
import BetModal from './Components/Modals/BetModal';
import InstructionsModal from './Components/Modals/InstructionsModal';
import { translations, formatString } from '../../Assets/Lang/translation';
import './Home.css';

// –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –° –£–í–ï–õ–ò–ß–ï–ù–ù–´–ú–ò –®–ê–ù–°–ê–ú–ò –í–´–ò–ì–†–´–®–ê
const SYMBOLS_CONFIG = [
  { id: 1, symbol: 'üçí', name: 'Cherry', weight: 70, type: 'fruit' },
  { id: 2, symbol: 'üçã', name: 'Lemon', weight: 65, type: 'fruit' },
  { id: 3, symbol: 'üçä', name: 'Orange', weight: 60, type: 'fruit' },
  { id: 4, symbol: 'üçâ', name: 'Watermelon', weight: 55, type: 'fruit' },
  { id: 5, symbol: 'üîî', name: 'Bell', weight: 40, type: 'bell' },
  { id: 6, symbol: '‚≠ê', name: 'Star', weight: 35, type: 'star' },
  { id: 7, symbol: 'üçá', name: 'Grapes', weight: 50, type: 'fruit' },
  { id: 8, symbol: 'üî∂', name: 'Diamond', weight: 25, type: 'diamond' },
  { id: 9, symbol: '‚ë¶', name: 'Seven', weight: 15, type: 'seven' },
  { id: 10, symbol: 'üíé', name: 'Premium Diamond', weight: 8, type: 'premium' },
  { id: 11, symbol: 'üëë', name: 'Crown', weight: 6, type: 'premium' },
  { id: 12, symbol: 'üíÄ', name: 'Skull', weight: 10, type: 'skull' },
  { id: 13, symbol: 'üî•', name: 'Fire', weight: 5, type: 'special' }
];

const getWinForCombination = (symbols) => {
  const [a, b, c] = symbols;
  
  console.log('üé∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:', symbols.join(' '));
  
  // 1. –¢–†–û–ô–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò (—É–≤–µ–ª–∏—á–µ–Ω—ã —à–∞–Ω—Å—ã)
  if (a === b && b === c) {
    const tripleWins = {
      'üçí': { multiplier: 2, name: 'TRIPLE CHERRY' },
      'üçã': { multiplier: 3, name: 'TRIPLE LEMON' },
      'üçä': { multiplier: 3, name: 'TRIPLE ORANGE' },
      'üçâ': { multiplier: 4, name: 'TRIPLE WATERMELON' },
      'üîî': { multiplier: 5, name: 'TRIPLE BELL' },
      '‚≠ê': { multiplier: 4, name: 'TRIPLE STAR' },
      'üçá': { multiplier: 3, name: 'TRIPLE GRAPES' },
      'üî∂': { multiplier: 6, name: 'TRIPLE DIAMOND' },
      '‚ë¶': { multiplier: 8, name: 'TRIPLE SEVEN' },
      'üíé': { multiplier: 25, name: 'DIAMOND JACKPOT' },
      'üëë': { multiplier: 15, name: 'CROWN JACKPOT' },
      'üíÄ': { multiplier: 0, name: 'SKULL BUST' },
      'üî•': { multiplier: 10, name: 'FIRE BONUS' }
    };
    return tripleWins[a] || null;
  }
  
  // 2. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò (–¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
  if (a === 'üíé' && b === 'üíé' && c === '‚≠ê') return { multiplier: 5, name: 'DIAMOND STAR' };
  if (a === 'üëë' && b === 'üëë' && c === '‚≠ê') return { multiplier: 4, name: 'CROWN STAR' };
  if (a === '‚ë¶' && b === '‚ë¶' && c === '‚≠ê') return { multiplier: 3, name: 'SEVEN STAR' };
  if (a === 'üîî' && b === 'üîî' && c === '‚≠ê') return { multiplier: 2.5, name: 'BELL STAR' };
  if (a === 'üçâ' && b === 'üçâ' && c === '‚≠ê') return { multiplier: 2, name: 'WATERMELON STAR' };
  if (a === 'üçá' && b === 'üçá' && c === '‚≠ê') return { multiplier: 2, name: 'GRAPES STAR' };
  if (a === 'üî∂' && b === 'üî∂' && c === '‚≠ê') return { multiplier: 3, name: 'DIAMOND STAR' };
  
  // 3. –î–í–û–ô–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò (—Ä–∞—Å—à–∏—Ä–µ–Ω—ã —É—Å–ª–æ–≤–∏—è)
  if (a === b || a === c || b === c) {
    let doubleSymbol;
    if (a === b) doubleSymbol = a;
    else if (a === c) doubleSymbol = a;
    else doubleSymbol = b;
    
    // –£–°–õ–û–í–ò–ï: –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–≤–æ–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã–º–∏
    if (doubleSymbol === 'üçí' || doubleSymbol === 'üçã' || doubleSymbol === 'üçä') {
      return null;
    }
    
    const doubleWins = {
      'üçâ': { multiplier: 0.8, name: 'DOUBLE WATERMELON' },
      'üîî': { multiplier: 1.2, name: 'DOUBLE BELL' },
      '‚≠ê': { multiplier: 0.8, name: 'DOUBLE STAR' },
      'üçá': { multiplier: 0.8, name: 'DOUBLE GRAPES' },
      'üî∂': { multiplier: 1.5, name: 'DOUBLE DIAMOND' },
      '‚ë¶': { multiplier: 2, name: 'DOUBLE SEVEN' },
      'üíé': { multiplier: 3, name: 'DOUBLE PREMIUM DIAMOND' },
      'üëë': { multiplier: 2, name: 'DOUBLE CROWN' },
      'üíÄ': { multiplier: 0, name: 'DOUBLE SKULL' },
      'üî•': { multiplier: 1.5, name: 'DOUBLE FIRE' }
    };
    
    return doubleWins[doubleSymbol] || null;
  }
  
  // 4. –§–†–£–ö–¢–û–í–´–ï –ú–ò–ö–°–´ (—É–≤–µ–ª–∏—á–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å)
  const fruits = ['üçí', 'üçã', 'üçä', 'üçâ', 'üçá'];
  const isAllFruits = fruits.includes(a) && fruits.includes(b) && fruits.includes(c);
  const uniqueFruits = new Set([a, b, c]);
  
  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ç—Ä–∏ —Ñ—Ä—É–∫—Ç–∞ –†–ê–ó–ù–´–ï
  if (isAllFruits && uniqueFruits.size === 3) {
    return { multiplier: 1.2, name: 'FRUIT MIX' };
  }
  
  // 5. –õ–Æ–ë–ê–Ø –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø –° –û–ì–ù–ï–ú (–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π)
  if (a === 'üî•' || b === 'üî•' || c === 'üî•') {
    const fireCount = [a, b, c].filter(symbol => symbol === 'üî•').length;
    if (fireCount === 1) {
      return { multiplier: 0.5, name: 'FIRE BONUS' };
    }
  }
  
  return null;
};

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
function Home({ userData, updateUserData, isActive, language = 'english' }) {
  const [selectedOption, setSelectedOption] = useState('ton');
  const [isSpinning, setIsSpinning] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);
  const [showBetModal, setShowBetModal] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  const t = (translations[language] && translations[language].home) ? translations[language].home : translations.english.home;
  const commonT = (translations[language] && translations[language].common) ? translations[language].common : translations.english.common;
  
  const [betResult, setBetResult] = useState(t.welcomeMessage || 'Welcome! Place your bet and spin!');
  const [showConfetti, setShowConfetti] = useState(false);
  const [confettiOpacity, setConfettiOpacity] = useState(1);
  const [betAmount, setBetAmount] = useState(0.1);
  const [windowDimensions, setWindowDimensions] = useState({ 
    width: window.innerWidth, 
    height: window.innerHeight 
  });
  
  const [currentSymbols, setCurrentSymbols] = useState(['üçí', 'üçí', 'üçí']);
  const [nextSpinSymbols, setNextSpinSymbols] = useState(null);
  
  const animationRef = useRef(null);

  const safeUserData = userData || {
    ton_amount: 0.000,
    coins: 0.000,
    telegram_user_id: null,
    first_name: 'User',
    username: 'user'
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const updateStatisticsInDB = useCallback(async (betAmount, winAmount, isWin) => {
    try {
      const telegramUserId = safeUserData?.telegram_user_id;
      
      if (!telegramUserId) {
        console.error('‚ùå No telegram user ID found');
        return { success: false, error: 'No telegram user ID found' };
      }

      console.log('üìä Updating statistics:', { betAmount, winAmount, isWin });

      const UPDATE_STATISTICS_URL = 'https://ton-jacket-backend.netlify.app/.netlify/functions/update-statistics';
      
      const response = await fetch(UPDATE_STATISTICS_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramUserId: telegramUserId,
          betAmount: parseFloat(betAmount),
          winAmount: parseFloat(winAmount),
          isWin: isWin
        }),
      });

      console.log('üì• Statistics response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
      }

      const data = await response.json();
      console.log('üì¶ Statistics response data:', data);
      
      if (data.success) {
        console.log('‚úÖ Statistics updated successfully');
        return { success: true };
      } else {
        console.error('‚ùå Error from update-statistics function:', data.error);
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('‚ùå Error updating statistics:', error);
      return { success: false, error: error.message };
    }
  }, [safeUserData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è bet_amount –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const updateBetAmountInDB = useCallback(async (amount) => {
    try {
      const telegramUserId = safeUserData?.telegram_user_id;
      
      if (!telegramUserId) {
        console.error('‚ùå No telegram user ID found');
        return { success: false, error: 'No telegram user ID found' };
      }

      console.log('üì§ Sending bet update request:', {
        telegramUserId,
        betAmount: amount
      });

      const UPDATE_BET_URL = 'https://ton-jacket-backend.netlify.app/.netlify/functions/update-bet';
      
      const response = await fetch(UPDATE_BET_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramUserId: telegramUserId,
          betAmount: parseFloat(amount.toFixed(3))
        }),
      });

      console.log('üì• Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
      }

      const data = await response.json();
      console.log('üì¶ Response data:', data);
      
      if (data.success) {
        console.log('‚úÖ Bet amount updated successfully');
        return { success: true };
      } else {
        console.error('‚ùå Error from update-bet function:', data.error);
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('‚ùå Error updating bet amount:', error);
      return { success: false, error: error.message };
    }
  }, [safeUserData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è coins –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const updateCoinsInDB = useCallback(async (coinsToAdd = 50) => {
    try {
      const telegramUserId = safeUserData?.telegram_user_id;
      
      if (!telegramUserId) {
        console.error('‚ùå No telegram user ID found');
        return { success: false, error: 'No telegram user ID found' };
      }

      console.log('üì§ Sending coins update request:', {
        telegramUserId,
        coinsToAdd
      });

      const UPDATE_COINS_URL = 'https://ton-jacket-backend.netlify.app/.netlify/functions/update-coins';
      
      const response = await fetch(UPDATE_COINS_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramUserId: telegramUserId,
          coinsToAdd: coinsToAdd
        }),
      });

      console.log('üì• Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
      }

      const data = await response.json();
      console.log('üì¶ Response data:', data);
      
      if (data.success) {
        console.log('‚úÖ Coins updated successfully');
        return { success: true };
      } else {
        console.error('‚ùå Error from update-coins function:', data.error);
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('‚ùå Error updating coins:', error);
      return { success: false, error: error.message };
    }
  }, [safeUserData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TON –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const updateTonAmountInDB = useCallback(async (tonChange) => {
    try {
      const telegramUserId = safeUserData?.telegram_user_id;
      
      if (!telegramUserId) {
        console.error('‚ùå No telegram user ID found');
        return { success: false, error: 'No telegram user ID found' };
      }

      console.log('üì§ Sending TON update request:', {
        telegramUserId,
        tonChange
      });

      const UPDATE_TON_URL = 'https://ton-jacket-backend.netlify.app/.netlify/functions/update-ton';
      
      const response = await fetch(UPDATE_TON_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramId: telegramUserId,
          tonAmount: tonChange
        }),
      });

      console.log('üì• Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
      }

      const data = await response.json();
      console.log('üì¶ Response data:', data);
      
      if (data.success) {
        console.log('‚úÖ TON amount updated successfully');
        return { success: true };
      } else {
        console.error('‚ùå Error from update-ton function:', data.error);
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('‚ùå Error updating TON amount:', error);
      return { success: false, error: error.message };
    }
  }, [safeUserData]);

  // Create symbols pool with weights
  const symbolsPool = useCallback(() => {
    const pool = [];
    SYMBOLS_CONFIG.forEach(symbolConfig => {
      for (let i = 0; i < symbolConfig.weight; i++) {
        pool.push(symbolConfig.symbol);
      }
    });
    return pool;
  }, []);

  const getRandomSymbol = useCallback(() => {
    const pool = symbolsPool();
    const randomIndex = Math.floor(Math.random() * pool.length);
    return pool[randomIndex];
  }, [symbolsPool]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
  const generateNextSpinSymbols = useCallback(() => {
    return [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()];
  }, [getRandomSymbol]);

  // Confetti animation
  const startConfetti = useCallback(() => {
    setShowConfetti(true);
    setConfettiOpacity(1);
    
    setTimeout(() => {
      setConfettiOpacity(0);
    }, 3000);
    
    setTimeout(() => {
      setShowConfetti(false);
    }, 4000);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É Spin
  const handleSpinClick = useCallback(() => {
    console.log('üîÑ –ö–Ω–æ–ø–∫–∞ Spin –Ω–∞–∂–∞—Ç–∞');
    if (isSpinning || selectedOption === 'gifts') return;
    
    if (selectedOption === 'ton') {
      const symbols = generateNextSpinSymbols();
      console.log('üéØ –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –°–ò–ú–í–û–õ–´:', symbols);
      setNextSpinSymbols(symbols);
      setShowBetModal(true);
    }
  }, [isSpinning, selectedOption, generateNextSpinSymbols]);

  // –ü–†–û–°–¢–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –ë–ï–ó DOM MANIPULATION
  const spinSlotMachine = useCallback(async () => {
    if (isSpinning || !nextSpinSymbols) return;
    
    console.log('üéÆ –ù–ê–ß–ê–õ–û –í–†–ê–©–ï–ù–ò–Ø –° –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ú–ò –°–ò–ú–í–û–õ–ê–ú–ò:', nextSpinSymbols);
    setIsSpinning(true);
    setBetResult(t.spinning || 'Spinning...');
    setShowConfetti(false);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å—Ç–∞–≤–∫–æ–π
    if (selectedOption === 'ton') {
      if (betAmount > safeUserData.ton_amount) {
        setBetResult(t.notEnoughTON || 'Not enough TON for this bet!');
        setIsSpinning(false);
        return;
      }
    }

    try {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º bet_amount –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏)
      const betResult = await updateBetAmountInDB(betAmount);
      if (!betResult.success) {
        setBetResult('Error updating bet: ' + betResult.error);
        setIsSpinning(false);
        return;
      }

      // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
      const spinDuration = 2000;
      const symbolChangeInterval = 100;
      let elapsedTime = 0;
      
      animationRef.current = setInterval(() => {
        elapsedTime += symbolChangeInterval;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const randomSymbols = [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()];
        setCurrentSymbols(randomSymbols);
        
        if (elapsedTime >= spinDuration) {
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï —Å–∏–º–≤–æ–ª—ã
          clearInterval(animationRef.current);
          setCurrentSymbols(nextSpinSymbols);
          
          console.log('‚úÖ –ê–ù–ò–ú–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê, –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –°–ò–ú–í–û–õ–´:', nextSpinSymbols);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• —Å–∏–º–≤–æ–ª–æ–≤
          const winCombination = getWinForCombination(nextSpinSymbols);
          
          const processResult = async () => {
            try {
              let winAmount = 0;
              let isWin = false;
              let netWin = 0;

              if (winCombination) {
                if (winCombination.multiplier === 0) {
                  // –ü–†–û–ò–ì–†–´–® - —É–º–µ–Ω—å—à–∞–µ–º TON –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
                  const bustMessage = formatString(t.bustMessage || 'BUST! {name} - you lose your bet!', { name: winCombination.name });
                  setBetResult(bustMessage);
                  await updateTonAmountInDB(-betAmount);
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –ø—Ä–æ–∏–≥—Ä—ã—à
                  await updateStatisticsInDB(betAmount, 0, false);
                } else {
                  // –í–´–ò–ì–†–´–® - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º TON –±–∞–ª–∞–Ω—Å –Ω–∞ —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à
                  winAmount = winCombination.multiplier * betAmount;
                  netWin = winAmount - betAmount; // –ß–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à
                  const winMessage = formatString(t.winMessage || 'Win! {name} x{multiplier} ({amount} TON)', { 
                    name: winCombination.name, 
                    multiplier: winCombination.multiplier, 
                    amount: winAmount.toFixed(2) 
                  });
                  setBetResult(winMessage);
                  
                  await updateTonAmountInDB(netWin);
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –≤—ã–∏–≥—Ä—ã—à
                  await updateStatisticsInDB(betAmount, winAmount, true);
                  startConfetti();
                  isWin = true;
                }
              } else {
                // –ü–†–û–ò–ì–†–´–® - —É–º–µ–Ω—å—à–∞–µ–º TON –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
                setBetResult(t.noWinMessage || 'No win this time. Try again!');
                await updateTonAmountInDB(-betAmount);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –ø—Ä–æ–∏–≥—Ä—ã—à
                await updateStatisticsInDB(betAmount, 0, false);
              }
              
              // 3. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º coins –Ω–∞ 50 –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
              await updateCoinsInDB(50);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              if (updateUserData) {
                await updateUserData();
              }
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
              setNextSpinSymbols(null);
              setIsSpinning(false);
            } catch (error) {
              console.error('‚ùå Error processing result:', error);
              const errorMessage = formatString(t.errorProcessing || 'Error processing result: {error}', { error: error.message });
              setBetResult(errorMessage);
              setIsSpinning(false);
            }
          };

          processResult();
        }
      }, symbolChangeInterval);
    } catch (error) {
      console.error('‚ùå Error during spin process:', error);
      const errorMessage = formatString(t.errorDuringSpin || 'Error during spin: {error}', { error: error.message });
      setBetResult(errorMessage);
      setIsSpinning(false);
    }
  }, [
    isSpinning, 
    nextSpinSymbols, 
    selectedOption, 
    betAmount, 
    safeUserData, 
    updateUserData, 
    getRandomSymbol, 
    startConfetti,
    updateBetAmountInDB,
    updateTonAmountInDB,
    updateCoinsInDB,
    updateStatisticsInDB,
    t
  ]);

  // –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (animationRef.current) {
        clearInterval(animationRef.current);
      }
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  const handleInstructionsClick = useCallback(() => {
    console.log('üìñ –ö–Ω–æ–ø–∫–∞ Instructions –Ω–∞–∂–∞—Ç–∞');
    setShowInstructions(true);
  }, []);

  const handleCloseBetModal = useCallback(() => {
    setShowBetModal(false);
    setNextSpinSymbols(null);
  }, []);

  const handleBetConfirm = useCallback(() => {
    console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏:', nextSpinSymbols);
    if (betAmount <= 0) {
      setBetResult(t.pleaseSelectValidBet || 'Please select a valid bet amount');
      return;
    }
    
    if (betAmount > safeUserData.ton_amount) {
      setBetResult(t.notEnoughTON || 'Not enough TON for this bet!');
      return;
    }
    
    handleCloseBetModal();
    setTimeout(() => {
      spinSlotMachine();
    }, 300);
  }, [betAmount, safeUserData.ton_amount, handleCloseBetModal, spinSlotMachine, nextSpinSymbols, t]);

  const handleBetButtonClick = useCallback((amount) => {
    console.log('üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞:', amount);
    setBetAmount(amount);
  }, []);

  const handleCloseInstructions = useCallback(() => {
    setShowInstructions(false);
  }, []);

  // Effect –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∫—Ä–æ–ª–ª–∞
  useEffect(() => {
    if (showInstructions || showBetModal) {
      document.body.classList.add('no-scroll');
    } else {
      document.body.classList.remove('no-scroll');
    }
    return () => document.body.classList.remove('no-scroll');
  }, [showInstructions, showBetModal]);

  // Effect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      setWindowDimensions({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Effect –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
  useEffect(() => {
    localStorage.setItem('slotMachineSymbols', JSON.stringify(currentSymbols));
  }, [currentSymbols]);

  // Effect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
  useEffect(() => {
    const savedSymbols = localStorage.getItem('slotMachineSymbols');
    if (savedSymbols) {
      try {
        const parsedSymbols = JSON.parse(savedSymbols);
        if (Array.isArray(parsedSymbols) && parsedSymbols.length === 3) {
          setCurrentSymbols(parsedSymbols);
        }
      } catch (error) {
        console.error('Error loading saved symbols:', error);
      }
    }
  }, []);

  if (!t) {
    console.error('Translation not found for language:', language);
    return <div>Error loading translations</div>;
  }

  return (
    <div className="container">
      {showConfetti && (
        <div style={{
          opacity: confettiOpacity,
          transition: 'opacity 1s ease-out',
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          pointerEvents: 'none'
        }}>
          <Confetti
            width={windowDimensions.width}
            height={windowDimensions.height}
            numberOfPieces={300}
            gravity={0.5}
            initialVelocityY={15}
            recycle={false}
            run={showConfetti}
            colors={['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff']}
          />
        </div>
      )}

      <BalanceSection 
        userData={safeUserData} 
        language={language}
      />

      <div className="slot-machine">
        <div className="slot-reels">
          {[0, 1, 2].map((index) => (
            <div key={index} className="reel-container">
              <div className="reel">
                <div className="reel-strip">
                  <div className="symbol">{currentSymbols[index]}</div>
                </div>
              </div>
            </div>
          ))}
        </div>
        <div className="slot-frame">
          <div className="pay-line"></div>
        </div>
        <div className="slot-overlay"></div>
      </div>

      <BetResultAndInstruction 
        betResult={betResult} 
        language={language}
      />

      <button 
        className="instructions-button"
        onClick={handleInstructionsClick}
      >
        {commonT.instructions}
      </button>

      <div className="choice-buttons">
        <button 
          className={`choice-btn ${selectedOption === 'ton' ? 'active' : ''}`}
          onClick={() => setSelectedOption('ton')}
        >
          {commonT.spinOnTON}
        </button>
        <button 
          className={`choice-btn ${selectedOption === 'gifts' ? 'active' : ''}`}
          onClick={() => setSelectedOption('gifts')}
        >
          {commonT.spinOnGifts}
        </button>
      </div>

      <button 
        className={`spin-go-button ${isSpinning ? 'spinning' : ''} ${selectedOption === 'gifts' ? 'coming-soon' : ''}`}
        onClick={handleSpinClick}
        disabled={isSpinning || selectedOption === 'gifts'}
      >
        {selectedOption === 'gifts' ? (
          t.comingSoon
        ) : isSpinning ? (
          <>
            <div className="spinner"></div>
            {t.spinning}
          </>
        ) : (
          t.spinButton
        )}
      </button>

      <InstructionsModal 
        showInstructions={showInstructions} 
        onClose={handleCloseInstructions}
        language={language}
      />
      
      <BetModal 
        showBetModal={showBetModal}
        betAmount={betAmount}
        userData={safeUserData}
        onClose={handleCloseBetModal}
        onConfirm={handleBetConfirm}
        onBetChange={handleBetButtonClick}
        language={language}
      />
      
      <Menu language={language} />
    </div>
  );
}

export default Home;